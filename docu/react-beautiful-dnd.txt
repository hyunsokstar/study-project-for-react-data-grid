todo:
getItems 함수에 대해 알아 보기


const getItems = (count: number): Item[] =>
  Array.from({ length: count }, (v, k) => k).map((k) => ({
    id: `item-${k}`,
    content: `item ${k + 1}`,
  }));


step1) getItems 의 구조에 대해 알아 보자
a. Array.from 에 의해 배열을 만든다.
b. { length: count } 는 배열의 개수
c. (v, k) => k 에서 v는 현재값 k는 index 이다. 여기서는 index 만 사용
d. 즉 5를 받으면 0,1,2,3,4 라는 배열을 만들게 되고 map 으로 돌려 컴퍼넌트 출력을 위한 새로운 요소로 바꿀수 있다.


step2) 예제를 실행 해보면서 step1 을 test 해보자 at https://www.typescriptlang.org/
```
type Item = {
  id: string;
  content: string;
};

const getItems = (count: number): Item[] =>
  Array.from({ length: count }, (v, k) => k).map((k) => ({
    id: `item-${k}`,
    content: `item ${k + 1}`,
  }));

const result = getItems(5);
console.log(result);
```

결과:
[LOG]: [{
  "id": "item-0",
  "content": "item 1"
}, {
  "id": "item-1",
  "content": "item 2"
}, {
  "id": "item-2",
  "content": "item 3"
}, {
  "id": "item-3",
  "content": "item 4"
}, {
  "id": "item-4",
  "content": "item 5"
}] 